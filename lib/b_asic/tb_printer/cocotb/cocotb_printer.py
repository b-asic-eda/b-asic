"""Module for generating cocotb test benches."""

import pprint
from pathlib import Path


class CocotbPrinter:
    def __init__(self, sequence_map):
        self.sequence_map = sequence_map

    def print(self, arch, path, gui: bool = False):
        path = Path(path)

        template_path = Path(__file__).parent / "template.py"
        with Path.open(template_path) as template_file:
            template = template_file.read()

        # Replace the file docstring
        tb_content = template.replace(
            '"""Template for cocotb testbench."""',
            '"""cocotb testbench generated by B-ASIC."""',
        )

        # Replace placeholders in the template with actual values
        tb_content = tb_content.replace(
            "SEQUENCE = {}",
            f"SEQUENCE = {pprint.pformat(self.sequence_map, width=120)}",
        )
        tb_content = tb_content.replace(
            'ENTITY_NAME = ""', f'ENTITY_NAME = "{arch.entity_name}"'
        )
        tb_content = tb_content.replace("GUI = False", f"GUI = {gui!s}")

        with Path.open(path / "tb.py", "w") as output_file:
            output_file.write(tb_content)

        with Path.open(path / "Makefile", "w") as makefile:
            makefile.write("SIM ?= ghdl\n")
            makefile.write("TOPLEVEL_LANG ?= vhdl\n\n")
            makefile.write("PWD := $(shell pwd)\n\n")
            makefile.write(
                "VHDL_SOURCES := $(shell find \"$(PWD)\" -type f \\( -name '*.vhd' -o -name '*.vhdl' \\) 2>/dev/null)\n\n"
            )
            makefile.write("COCOTB_TOPLEVEL ?= r3\n")
            makefile.write("COCOTB_TEST_MODULES ?= tb\n\n")
            makefile.write("include $(shell cocotb-config --makefiles)/Makefile.sim\n")
