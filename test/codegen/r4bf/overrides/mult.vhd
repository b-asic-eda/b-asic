--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-07-22 13:53:14.056148)
-- B-ASIC short commit hash: 4197ef4f
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mult is
    generic(
        -- Data word length
        WL : integer := 32;
        -- Schedule counter length
        SCHEDULE_CNT_LEN : integer := 3
    );
    port(
        -- Clock and synchronous reset signals
        clk : in std_logic;
        rst : in std_logic;

        -- State counter
        schedule_cnt : in unsigned(SCHEDULE_CNT_LEN-1 downto 0);

        -- PE port I/O
        p_0_in : in std_logic_vector(WL-1 downto 0);

        p_0_out : out std_logic_vector(WL-1 downto 0)
    );
end entity mult;

architecture rtl of mult is
    signal re_in, im_in, re_out, im_out : signed(15 downto 0);
begin

    re_in <= signed(p_0_in(31 downto 16));
    im_in <= signed(p_0_in(15 downto 0));

    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                re_out <= (others => '0');
                im_out <= (others => '0');
            else
                re_out <= -im_in;
                im_out <= re_in;
            end if;
        end if;
    end process;

    p_0_out <= std_logic_vector(re_out) & std_logic_vector(im_out);

end architecture rtl;
