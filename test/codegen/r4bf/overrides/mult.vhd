--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-08-05 10:55:21.790953)
-- B-ASIC short commit hash: 2129bde3
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mult is
    generic (
        WL_INTERNAL_INT : integer;
        WL_INTERNAL_FRAC : integer;
        WL_INPUT_INT : integer;
        WL_INPUT_FRAC : integer;
        WL_OUTPUT_INT : integer;
        WL_OUTPUT_FRAC : integer;
        WL_STATE : integer
    );
    port (
        clk : in std_logic;
        schedule_cnt : in unsigned(WL_STATE-1 downto 0);
        p_0_in : in signed(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0);
        p_0_out : out signed(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0)
    );
end entity mult;

architecture rtl of mult is
    signal re_in, im_in, re_out, im_out : signed(15 downto 0) := (others => '0');
begin

    re_in <= signed(p_0_in(31 downto 16));
    im_in <= signed(p_0_in(15 downto 0));

    process(clk)
    begin
        if rising_edge(clk) then
            re_out <= -im_in;
            im_out <= re_in;
        end if;
    end process;

    p_0_out <= re_out & im_out;

end architecture rtl;
