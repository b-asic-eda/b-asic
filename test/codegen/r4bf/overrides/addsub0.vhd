--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-07-22 13:53:14.057940)
-- B-ASIC short commit hash: 4197ef4f
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity addsub0 is
    generic(
        -- Data word length
        WL : integer := 32;
        -- Schedule counter length
        SCHEDULE_CNT_LEN : integer := 3
    );
    port(
        -- Clock and synchronous reset signals
        clk : in std_logic;
        rst : in std_logic;

        -- State counter
        schedule_cnt : in unsigned(SCHEDULE_CNT_LEN-1 downto 0);

        -- PE port I/O
        p_0_in : in std_logic_vector(WL-1 downto 0);

        p_1_in : in std_logic_vector(WL-1 downto 0);

        p_0_out : out std_logic_vector(WL-1 downto 0)
    );
end entity addsub0;

architecture rtl of addsub0 is
    signal re_op_a, re_op_b, im_op_a, im_op_b : signed(15 downto 0);
    signal re_res, im_res : signed(15 downto 0);
    signal is_add : std_logic;
begin
    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                re_op_a <= (others => '0');
                re_op_b <= (others => '0');
                im_op_a <= (others => '0');
                im_op_b <= (others => '0');
            else
                re_op_a <= signed(p_0_in(31 downto 16));
                re_op_b <= signed(p_1_in(31 downto 16));
                im_op_a <= signed(p_0_in(15 downto 0));
                im_op_b <= signed(p_1_in(15 downto 0));
            end if;
        end if;
    end process;

    is_add <= '1';

    re_res <= re_op_a + re_op_b when is_add = '1' else re_op_a - re_op_b;
    im_res <= im_op_a + im_op_b when is_add = '1' else im_op_a - im_op_b;

    p_0_out <= std_logic_vector(re_res) & std_logic_vector(im_res);

end architecture rtl;
