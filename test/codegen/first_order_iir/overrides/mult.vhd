--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-07-22 08:47:53.714963)
-- B-ASIC short commit hash: e6c0e4cc
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mult is
    generic(
        -- Data word length
        WL : integer := 16;
        -- Schedule counter length
        SCHEDULE_CNT_LEN : integer := 2
    );
    port(
        -- Clock and synchronous reset signals
        clk : in std_logic;
        rst : in std_logic;

        -- State counter
        schedule_cnt : in unsigned(SCHEDULE_CNT_LEN-1 downto 0);

        -- PE port I/O
        p_0_in : in std_logic_vector(WL-1 downto 0);

        p_0_out : out std_logic_vector(WL-1 downto 0)
    );
end entity mult;

architecture rtl of mult is
    signal op_a : unsigned(WL-1 downto 0);
    signal tmp_res : unsigned(2*WL-1 downto 0);
    signal value : unsigned(WL-1 downto 0);
begin
    -- WRITE CODE HERE
    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                op_a <= (others => '0');
            else
                op_a <= unsigned(p_0_in);
            end if;
        end if;
    end process;

    with to_integer(schedule_cnt) select
        value <=
            to_unsigned(9598, 16) when 1,
            to_unsigned(13573, 16) when 2,
            to_unsigned(9598, 16) when 0,

            (others => '-') when others;

    tmp_res <= op_a * value;

    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                p_0_out <= (others => '0');
            else
                p_0_out <= std_logic_vector(tmp_res(30 downto 15));
            end if;
        end if;
    end process;
end architecture rtl;
