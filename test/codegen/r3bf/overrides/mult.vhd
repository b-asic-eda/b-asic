--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-08-05 10:58:11.320277)
-- B-ASIC short commit hash: 2129bde3
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mult is
    generic (
        WL_INTERNAL_INT : integer;
        WL_INTERNAL_FRAC : integer
    );
    port (
        clk : in std_logic;
        schedule_cnt : in unsigned(1 downto 0);
        p_0_in : in signed(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0);
        p_0_out : out signed(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0)
    );
end entity mult;

architecture rtl of mult is
    constant C1 : signed(15 downto 0) := to_signed(-12288, 16); -- (-1.5 * 2**13)
    constant C2_0 : signed(15 downto 0) := to_signed(-7094, 16); -- (-0.866...)
    constant C2_1 : signed(15 downto 0) := to_signed(7094, 16); -- (0.866...)

    signal re_in, im_in, re_out, im_out : signed(15 downto 0) := (others => '0');
    signal re_op_a, re_op_b, im_op_a, im_op_b : signed(15 downto 0);
    signal tmp_res_re, tmp_res_im : signed(31 downto 0);
begin

    process(clk)
    begin
        if rising_edge(clk) then
            re_in <= signed(p_0_in(31 downto 16));
            im_in <= signed(p_0_in(15 downto 0));
        end if;
    end process;

    with to_integer(schedule_cnt) select
        re_op_a <= im_in when 1,
            re_in when 0,
            (others => '-') when others;

    with to_integer(schedule_cnt) select
        re_op_b <= C1 when 0,
            C2_1 when 1,
            (others => '-') when others;

    with to_integer(schedule_cnt) select
        im_op_a <= re_in when 1,
            im_in when 0,
            (others => '-') when others;

    with to_integer(schedule_cnt) select
        im_op_b <= C1 when 0,
            C2_0 when 1,
            (others => '-') when others;

    tmp_res_re <= re_op_a * re_op_b;
    tmp_res_im <= im_op_a * im_op_b;

    re_out <= tmp_res_re(28 downto 13);
    im_out <= tmp_res_im(28 downto 13);
    p_0_out <= re_out & im_out;

end architecture rtl;
