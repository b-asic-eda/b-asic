--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-08-05 10:54:07.121700)
-- B-ASIC short commit hash: 2129bde3
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity addsub0 is
    generic (
        WL_INTERNAL_INT : integer;
        WL_INTERNAL_FRAC : integer;
        WL_INPUT_INT : integer;
        WL_INPUT_FRAC : integer;
        WL_OUTPUT_INT : integer;
        WL_OUTPUT_FRAC : integer;
        WL_STATE : integer
    );
    port (
        clk : in std_logic;
        rst : in std_logic;
        schedule_cnt : in unsigned(WL_STATE-1 downto 0);
        p_0_in : in std_logic_vector(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0);
        p_1_in : in std_logic_vector(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0);
        p_0_out : out std_logic_vector(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0)
    );
end entity addsub0;

architecture rtl of addsub0 is
    signal op_a, op_b : unsigned(WL_INTERNAL_INT+WL_INTERNAL_FRAC-1 downto 0);
    signal is_add : std_logic;
begin
    -- WRITE CODE HERE
    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                op_a <= (others => '0');
                op_b <= (others => '0');
            else
                op_a <= unsigned(p_0_in);
                op_b <= unsigned(p_1_in);
            end if;
        end if;
    end process;

    with to_integer(schedule_cnt) select
        is_add <=
            '1' when 0,
            '0' when 1,
            '-' when others;

    p_0_out <= std_logic_vector(op_a + op_b) when is_add = '1' else std_logic_vector(op_a - op_b);

end architecture rtl;
