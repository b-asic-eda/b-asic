--
-- This code was automatically generated by the B-ASIC toolbox.
-- Code generation timestamp: (2025-07-21 08:59:49.964099)
-- URL: https://gitlab.liu.se/da/B-ASIC
--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity addsub0 is
    generic(
        -- Data word length
        WL : integer := 16;
        -- Schedule counter length
        SCHEDULE_CNT_LEN : integer := 2
    );
    port(
        -- Clock and synchronous reset signals
        clk : in std_logic;
        rst : in std_logic;

        -- State counter
        schedule_cnt : in unsigned(SCHEDULE_CNT_LEN-1 downto 0);

        -- PE port I/O
        p_0_in : in std_logic_vector(WL-1 downto 0);

        p_1_in : in std_logic_vector(WL-1 downto 0);

        p_0_out : out std_logic_vector(WL-1 downto 0)
    );
end entity addsub0;

architecture rtl of addsub0 is
    signal op_a, op_b : unsigned(WL-1 downto 0);
    signal is_add : std_logic;
begin
    -- WRITE CODE HERE
    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                op_a <= (others => '0');
                op_b <= (others => '0');
            else
                op_a <= unsigned(p_0_in);
                op_b <= unsigned(p_1_in);
            end if;
        end if;
    end process;

    with to_integer(schedule_cnt) select
        is_add <=
            '1' when 0,
            '0' when 1,
            '-' when others;

    p_0_out <= std_logic_vector(op_a + op_b) when is_add = '1' else std_logic_vector(op_a - op_b);

end architecture rtl;
